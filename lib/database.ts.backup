import { Pool, PoolClient } from 'pg';
import Redis from 'ioredis';

// PostgreSQL connection
let pool: Pool | null = null;

export function getPool(): Pool {
  if (!pool) {
    pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      host: process.env.POSTGRES_HOST,
      port: parseInt(process.env.POSTGRES_PORT || '5432'),
      user: process.env.POSTGRES_USER,
      password: process.env.POSTGRES_PASSWORD,
      database: process.env.POSTGRES_DB,
      max: 20,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000,
    });
  }
  return pool;
}

export async function query(text: string, params?: unknown[]): Promise<{ rows: unknown[]; rowCount: number | null }> {
  const pool = getPool();
  const start = Date.now();
  try {
    const res = await pool.query(text, params);
    const duration = Date.now() - start;
    console.log('Executed query', { text, duration, rows: res.rowCount });
    return res;
  } catch (error) {
    console.error('Database query error:', { text, error });
    throw error;
  }
}

export async function getClient(): Promise<PoolClient> {
  const pool = getPool();
  return await pool.connect();
}

// Redis connection
let redis: Redis | null = null;

export function getRedis(): Redis {
  if (!redis) {
    redis = new Redis(process.env.REDIS_URL || {
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
      retryDelayOnFailover: 100,
      enableReadyCheck: false,
      maxRetriesPerRequest: null,
    });

    redis.on('error', (err) => {
      console.error('Redis connection error:', err);
    });

    redis.on('connect', () => {
      console.log('Connected to Redis');
    });
  }
  return redis;
}

// Cache helpers
export async function setCache(key: string, value: unknown, ttl: number = 300): Promise<void> {
  const redis = getRedis();
  await redis.setex(key, ttl, JSON.stringify(value));
}

export async function getCache(key: string): Promise<unknown | null> {
  const redis = getRedis();
  const cached = await redis.get(key);
  return cached ? JSON.parse(cached) : null;
}

export async function delCache(key: string): Promise<void> {
  const redis = getRedis();
  await redis.del(key);
}

// Database connection health check
export async function healthCheck(): Promise<{ db: boolean; redis: boolean }> {
  let dbHealth = false;
  let redisHealth = false;

  try {
    await query('SELECT 1');
    dbHealth = true;
  } catch (error) {
    console.error('Database health check failed:', error);
  }

  try {
    const redis = getRedis();
    await redis.ping();
    redisHealth = true;
  } catch (error) {
    console.error('Redis health check failed:', error);
  }

  return { db: dbHealth, redis: redisHealth };
}

// Graceful shutdown
export async function closeConnections(): Promise<void> {
  try {
    if (pool) {
      await pool.end();
      pool = null;
    }
    if (redis) {
      redis.disconnect();
      redis = null;
    }
    console.log('Database connections closed');
  } catch (error) {
    console.error('Error closing connections:', error);
  }
}
